#! /usr/bin/env node

const fs = require('fs');
const path = require('path');
const util = require('util');
const { SourceMapConsumer } = require('source-map');
const { codeFrameColumns } = require('@babel/code-frame');

const mkdir = util.promisify(fs.mkdir);
const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

const argv = require('yargs').command('$0 <map> <output>', 'Extract all files from source map', (yargs) => {
  yargs
    .positional('map', {
      describe: 'Source map file',
    })
    .positional('output', {
      describe: 'Output folder',
    })
    .option('filter', {
      alias: 'f',
      default: 'node_modules',
      describe: 'Regexp in order to filter out files',
    });
}).argv;

function removeStartingParent(p) {
  const re = new RegExp(`^..${path.sep}`);
  while (p.match(re)) {
    p = p.replace(re, '');
  }
  return p;
}

async function main(args) {
  try {
    const output = args.output;
    const raw = JSON.parse(await readFile(path.resolve(args.map)));
    const regexp = new RegExp(args.filter);

    await SourceMapConsumer.with(raw, null, async (consumer) => {
      const sources = consumer.sources.filter((name) => !name.match(regexp));
      console.log(JSON.stringify(sources, null, 2));

      for (const source of sources) {
        const data = consumer.sourceContentFor(source);
        if (!data) continue;
        const p = path.join(output, removeStartingParent(source));
        const parsed = path.parse(p);
        await mkdir(parsed.dir, { recursive: true });
        await writeFile(p, data);
      }

      process.exit(0);
    });
  } catch (e) {
    console.log(e.toString());
    process.exit(1);
  }
}

main(argv);
